{"version":3,"sources":["common/FormControl/FormControl.jsx","common/FormControl/style.module.css","utils/validators.js","common/FormControl/Textarea/Textarea.jsx","common/components/Dialogs/style.module.css","common/components/Dialogs/DialogItem/DialogItem.jsx","common/components/Dialogs/Message/Message.jsx","common/components/Dialogs/Dialogs.jsx","hoc/withRedirectAuth.js","common/components/Dialogs/DialogsContainer.jsx"],"names":["createField","component","validates","type","name","placeholder","id","validate","FormControl","meta","children","input","error","isCheck","touched","className","styles","container","warningContent","module","exports","required","value","undefined","maxLength","max","length","minLengthPassowrd","email","test","Textarea","props","restProps","DialogItem","path","classes","dialog","to","Message","message","maxLengthMessage","AddNewMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Dialogs","state","dialogPage","messagesElements","messages","map","key","dialogElements","dialogs","dialogsItems","values","Object","keys","addNewMessage","mapStateToPropsForRedirectContainer","isAuth","auth","withRedirectAuth","Component","connect","compose","dsipatch","newMessage","addNewMessageBody"],"mappings":"kMAqBaA,EAAc,SAACC,GAAiE,IAAtDC,EAAqD,uDAAzC,GAAIC,EAAqC,uDAA9B,GAAIC,EAA0B,uCAApBC,EAAoB,uCAAPC,EAAO,uCAC1F,OACE,kBAAC,IAAD,CACEA,GAAIA,EACJH,KAAMA,EACNC,KAAMA,EACNH,UAAWA,EACXM,SAAUL,EACVG,YAAaA,KAIJG,IA5BK,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,KAAaC,GAA6B,EAApCC,MAAoC,EAA7BD,UAC1BE,GADuD,2CACpCH,EAAnBG,OACFC,EADqBJ,EAAZK,SACYF,EAC3B,OACE,yBAAKG,UAAWC,IAAOC,WACrB,yBACEF,UAAS,UAAKF,EAAUG,IAAOE,eAAiB,GAAvC,uBAGRR,GAEFG,GAAW,8BAAOD,M,oBCfzBO,EAAOC,QAAU,CAAC,UAAY,yBAAyB,eAAiB,8BAA8B,qBAAuB,sC,iCCD7H,wIACO,IAAMC,EAAW,SAACC,GAErB,OAAOA,OAAQC,EAAY,qBAMlBC,EAAY,SAACC,GAAD,OAAS,SAACH,GAC/B,OAAOA,GAASA,EAAMI,OAASD,EAAxB,kBAAyCA,EAAzC,4BAAoEF,IAGlEI,EAAoB,SAACF,GAAD,OAAS,SAACH,GACvC,OAAOA,GAASA,EAAMI,OAASD,EAAxB,uCAA8DA,EAA9D,oBAAiFF,IAI/EK,EAAQ,SAAAN,GAAK,OAAIA,IAAU,4CAA4CO,KAAKP,GAAS,6BAA0BC,I,uECN7GO,IARE,SAACC,GAAW,IACnBpB,EAAwBoB,EAAxBpB,MAAUqB,EADQ,YACMD,EADN,WAE1B,OACE,kBAAC,IAAgBA,EACf,8CAAcpB,EAAWqB,O,oBCP/Bb,EAAOC,QAAU,CAAC,QAAU,uBAAuB,aAAe,4BAA4B,OAAS,sBAAsB,OAAS,sBAAsB,QAAU,yB,sFCevJa,EAVI,SAAAF,GACf,IAAMG,EAAO,YAAcH,EAAMzB,GACjC,OACI,yBAAKS,UAAWoB,IAAQC,QACpB,kBAAC,IAAD,CAASC,GAAIH,GACRH,EAAM3B,QCARkC,EANC,SAAAP,GACZ,OACI,yBAAKhB,UAAWoB,IAAQI,SAAUR,EAAMQ,U,oCC+B1CC,EAAmBhB,YAAU,KAmB7BiB,EAAyBC,YAAU,CACvCC,KAAM,qBADuBD,EAjBL,SAACX,GACzB,OACE,0BAAMa,SAAUb,EAAMc,cACnB7C,YACC8B,IACA,CAACT,IAAUmB,GACX,GACA,UACA,sBAEF,6BACE,oDAUOM,EAlDC,SAACf,GACf,IAAMgB,EAAQhB,EAAMiB,WACdC,EAAmBF,EAAMG,SAASC,KAAI,gBAAG7C,EAAH,EAAGA,GAAIiC,EAAP,EAAOA,QAAP,OAC1C,kBAAC,EAAD,CAASa,IAAK9C,EAAIiC,QAASA,EAASjC,GAAIA,OAGpC+C,EAAiBN,EAAMO,QAAQH,KAAI,gBAAG/C,EAAH,EAAGA,KAAME,EAAT,EAASA,GAAT,OACvC,kBAAC,EAAD,CAAY8C,IAAK9C,EAAIF,KAAMA,EAAME,GAAIA,OAQvC,OACE,yBAAKS,UAAWoB,IAAQmB,SACtB,yBAAKvC,UAAWoB,IAAQoB,cAAeF,GAEvC,yBAAKtC,UAAWoB,IAAQe,UAAWD,GACnC,6BACE,kBAACR,EAAD,CAAwBG,SAXN,SAACY,GACTC,OAAOC,KAAKF,GAAQ9B,QACvBK,EAAM4B,cAAcH,EAAOjB,e,uBCjBpCqB,EAAsC,SAACb,GAAD,MAAY,CACpDc,OAAQd,EAAMe,KAAKD,SAYRE,EAVU,SAACC,GAQtB,OAAOC,YAAQL,EAAqC,KAA7CK,EAP0B,SAAClC,GAC9B,OAAqB,IAAjBA,EAAM8B,OACC,kBAAC,IAAD,CAAUxB,GAAG,WAEjB,kBAAC2B,EAAcjC,O,QCQfmC,sBACbD,aAfsB,SAAClB,GACvB,MAAO,CACLC,WAAYD,EAAMC,eAIK,SAACmB,GAC1B,MAAO,CACLR,cAAe,SAACS,GACd,OAAOD,EAASE,YAAkBD,SAOtCL,EAFaG,CAGbpB","file":"static/js/5.a46f6159.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport styles from \"./style.module.css\";\r\nimport { Field } from \"redux-form\";\r\n\r\nconst FormControl = ({ meta, input, children, ...restProps }) => {\r\n  const { error, touched } = meta;\r\n  const isCheck = touched && error;\r\n  return (\r\n    <div className={styles.container}>\r\n      <div\r\n        className={`${isCheck ? styles.warningContent : \"\"} flexible vertical`}\r\n      >\r\n        {/* <textarea {...input} {...restProps}></textarea> */}\r\n        {children}\r\n      </div>\r\n      {isCheck && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const createField = (component, validates = [], type = \"\", name, placeholder, id) => {\r\n  return (\r\n    <Field\r\n      id={id}\r\n      type={type}\r\n      name={name}\r\n      component={component}\r\n      validate={validates}\r\n      placeholder={placeholder}\r\n    />\r\n  );\r\n};\r\nexport default FormControl;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__2Pbsw\",\"warningContent\":\"style_warningContent__2DvKH\",\"commonErrorContainer\":\"style_commonErrorContainer__zYqpi\"};","//check if the input field is empty not add\r\nexport const required = (value) => {\r\n    // return value ? false : true ;//working\r\n    return value ? undefined : \"Field is required\";\r\n    //true - not add -> \" \", 1, -5 every if true not add\r\n    //false - added ->  return value; //added  because come undefined\r\n}\r\n\r\n////validator creator for own parametr\r\nexport const maxLength = (max) => (value) => {\r\n    return value && value.length > max ? `Must be ${max} characters or less` : undefined;\r\n}\r\n\r\nexport const minLengthPassowrd = (max) => (value) => {\r\n    return value && value.length < max ? `Enter a password longer than ${max} characters` : undefined;\r\n}\r\n\r\n\r\nexport const email = value => value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ? 'Invalid email address' : undefined;\r\n","import React from \"react\";\r\n\r\nimport FormControl from \"./../FormControl\";\r\n\r\nconst Textarea = (props) => {\r\n  const { input, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps}></textarea>\r\n    </FormControl>\r\n  );\r\n};\r\nexport default Textarea;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"style_dialogs__2NiAw\",\"dialogsItems\":\"style_dialogsItems__2YP1f\",\"dialog\":\"style_dialog__30wkq\",\"active\":\"style_active__2CZ0s\",\"message\":\"style_message__1mi2U\"};","import React from 'react';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport classes from  '../style.module.css';\r\n\r\nconst DialogItem = props => {\r\n    const path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={classes.dialog}>\r\n            <NavLink to={path}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}\r\nexport default DialogItem;","import React from 'react';\r\n\r\nimport classes from '../style.module.css';\r\n\r\n\r\nconst Message = props => {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n\r\n    )\r\n}\r\nexport default Message;","import React from \"react\";\r\n\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\n\r\nimport classes from \"./style.module.css\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport Textarea from \"./../../FormControl/Textarea/Textarea\";\r\nimport { required, maxLength } from \"./../../../utils/validators\";\r\nimport { createField } from \"./../../FormControl/FormControl\";\r\n\r\nconst Dialogs = (props) => {\r\n  const state = props.dialogPage;\r\n  const messagesElements = state.messages.map(({ id, message }) => (\r\n    <Message key={id} message={message} id={id} />\r\n  ));\r\n\r\n  const dialogElements = state.dialogs.map(({ name, id }) => (\r\n    <DialogItem key={id} name={name} id={id} />\r\n  ));\r\n\r\n  const onAddNewMessage = (values) => {\r\n    let isEmpty = Object.keys(values).length;\r\n    isEmpty && props.addNewMessage(values.message);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.dialogs}>\r\n      <div className={classes.dialogsItems}>{dialogElements}</div>\r\n\r\n      <div className={classes.messages}>{messagesElements}</div>\r\n      <div>\r\n        <AddNewMessageFormRedux onSubmit={onAddNewMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst maxLengthMessage = maxLength(100); //validator creator\r\n\r\nconst AddNewMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      {createField(\r\n        Textarea,\r\n        [required, maxLengthMessage],\r\n        \"\",\r\n        \"message\",\r\n        \"Enter your message\"\r\n      )}\r\n      <div>\r\n        <button>ADD MESSAGE</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddNewMessageFormRedux = reduxForm({\r\n  form: \"addNewMessageForm\",\r\n})(AddNewMessageForm);\r\n\r\nexport default Dialogs;\r\n","\r\nimport React from 'react';\r\n\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToPropsForRedirectContainer = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n});\r\nconst withRedirectAuth = (Component) => {\r\n    const WrappedRedirectComponent = (props) => {\r\n        if (props.isAuth === false) {\r\n            return <Redirect to=\"/login\" />;\r\n        }\r\n        return <Component {...props} />;\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirectContainer, null)(WrappedRedirectComponent);\r\n}\r\nexport default withRedirectAuth;","import Dialogs from \"./Dialogs\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\n\r\nimport withRedirectAuth from \"../../../hoc/withRedirectAuth\";\r\nimport { addNewMessageBody } from \"../../../redux/dialogReducer\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    dialogPage: state.dialogPage,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dsipatch) => {\r\n  return {\r\n    addNewMessage: (newMessage) => {\r\n      return dsipatch(addNewMessageBody(newMessage));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withRedirectAuth\r\n)(Dialogs);\r\n"],"sourceRoot":""}